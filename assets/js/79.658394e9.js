(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{607:function(s,t,e){"use strict";e.r(t);var a=e(5),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"systemjs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemjs"}},[s._v("#")]),s._v(" SystemJs")]),s._v(" "),e("h2",{attrs:{id:"什么是systemjs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是systemjs"}},[s._v("#")]),s._v(" 什么是SystemJS")]),s._v(" "),e("p",[s._v("SystemJs实际上就是一个动态模块加载器。")]),s._v(" "),e("p",[s._v("在微前端架构中, 微应用被打包成模块, 但浏览器并不支持模块化, 需要使用systemJs实现浏览器中的模块化。")]),s._v(" "),e("p",[s._v("SystemJs是一个用于实现模块化的js库, 有属于自己的模块化规范。")]),s._v(" "),e("p",[s._v("在开发阶段我们可以使用ES Module, 然后使用 webpack将其转换为 systemJs支持的模块。")]),s._v(" "),e("h2",{attrs:{id:"案例-通过webpack将react应用打包为-systemjs-模块-在通过-systemjs在浏览器中加载模块。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例-通过webpack将react应用打包为-systemjs-模块-在通过-systemjs在浏览器中加载模块。"}},[s._v("#")]),s._v(" 案例: 通过webpack将react应用打包为 systemJs 模块, 在通过 systemJs在浏览器中加载模块。")])])}),[],!1,null,null,null);t.default=r.exports}}]);