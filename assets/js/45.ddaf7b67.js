(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{561:function(v,_,t){"use strict";t.r(_);var a=t(5),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"前端工程化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[v._v("#")]),v._v(" 前端工程化")]),v._v(" "),t("h2",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[v._v("#")]),v._v(" 定义")]),v._v(" "),t("p",[v._v("前端工程化指遵循一定标准和规范, 通过工具去降低提高效率降低成本的一种手段。")]),v._v(" "),t("p",[v._v("在目前的前端行业极其受重视，究其原因就是目前前端应用功能要求不断提高，业务逻辑日益复杂，作为当下互联网时代不可或缺的项目，前端占据了当下整个互联网行业的半壁江山。")]),v._v(" "),t("p",[v._v("从传统网站到现在的H5，大型SPA, 移动APP，小程序，exe，前端基本上是无所不能的全面覆盖，以前往写demo，套模板再去调页面的刀耕火种的方式，完全不符合当下的要求。前端工程化就是这样被抬出来了，作为当前的必备技能。")]),v._v(" "),t("p",[v._v("前端工程化主要为了就解决如下问题:")]),v._v(" "),t("ul",[t("li",[v._v("当我们想使用最新的ES规范去提高编码效率，会发现实际使用中这样的编码不兼容。(JS代码兼容性)")]),v._v(" "),t("li",[v._v("再来就是less/scss、PostCSS增强CSS的编程性, 但是运行环境不能直接支持。 (CSS增强和整合)")]),v._v(" "),t("li",[v._v("在一个就是想使用模块化或组件化的的方式提高项目的可维护性，但运行环境不能直接支持。(模块化代码组织)")]),v._v(" "),t("li",[v._v("同时我们在开发后在部署上线之前，需要"),t("code",[v._v("手动")]),v._v("压缩代码和资源，部署过程需要"),t("code",[v._v("手动")]),v._v("上传代码到服务器。(部署过程统一处理代码)")]),v._v(" "),t("li",[v._v("多人协作开发, 无法硬性统一大家的编码风格, 从仓库中pull回来的代码质量无法保证。(统一开发成员的编码风格)")]),v._v(" "),t("li",[v._v("部分功能开发时需要等待后端服务接口提前完成。（对后端依赖过大）")])]),v._v(" "),t("p",[v._v("总结如下:")]),v._v(" "),t("ol",[t("li",[v._v("传统语言或语法的弊端")]),v._v(" "),t("li",[v._v("无法使用模块化/组件化")]),v._v(" "),t("li",[v._v("重复的机械工作")]),v._v(" "),t("li",[v._v("代码风格统一、质量保证")]),v._v(" "),t("li",[v._v("依赖后端服务接口支持")]),v._v(" "),t("li",[v._v("整体依赖后端项目")])]),v._v(" "),t("h2",{attrs:{id:"工程化的表现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工程化的表现"}},[v._v("#")]),v._v(" 工程化的表现")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("———— 一切以提高效率、降低成本、质量保证为目的的手段都属于[工程化]\n")])])]),t("p",[v._v("一切重复的工作都应该被自动化")]),v._v(" "),t("p",[v._v("从"),t("code",[v._v("创建项目")]),v._v("--\x3e"),t("code",[v._v("编码")]),v._v("--\x3e"),t("code",[v._v("预览/测试")]),v._v("--\x3e"),t("code",[v._v("提交")]),v._v("--\x3e"),t("code",[v._v("部署")]),v._v("--\x3e"),t("code",[v._v("编码")])]),v._v(" "),t("p",[v._v("上面的每一个环节, 都可以通过工程化的方式大大提高效率。")]),v._v(" "),t("h2",{attrs:{id:"具体如下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#具体如下"}},[v._v("#")]),v._v(" 具体如下:")]),v._v(" "),t("h3",{attrs:{id:"创建项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[v._v("#")]),v._v(" 创建项目:")]),v._v(" "),t("p",[v._v("在项目创建过程中， 使用脚手架工具自动完成下面的基础环境搭建")]),v._v(" "),t("ul",[t("li",[v._v("创建项目解构")]),v._v(" "),t("li",[v._v("创建特定类型的文件")])]),v._v(" "),t("h3",{attrs:{id:"编码阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编码阶段"}},[v._v("#")]),v._v(" 编码阶段:")]),v._v(" "),t("p",[v._v("到编码阶段, 借助工程化工具自动化的做如下操作, 确保代码风格，使用编译工具提高编码效率")]),v._v(" "),t("ul",[t("li",[v._v("格式化代码")]),v._v(" "),t("li",[v._v("校验代码风格")]),v._v(" "),t("li",[v._v("编译/构建/打包")])]),v._v(" "),t("h3",{attrs:{id:"预览环节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预览环节"}},[v._v("#")]),v._v(" 预览环节")]),v._v(" "),t("p",[v._v("传统的预览环节需要借助apache或者nginx这一的web服务器去启动应用, 但是这种传统的web服务没有热更新体验, 需要不断重启。并且在开发阶段需要编译代码, 可以使用Source Map对应源代码")]),v._v(" "),t("p",[v._v("也可以使用Mock在后端服务未完成的情况下提前开发功能。")]),v._v(" "),t("ul",[t("li",[v._v("Web Server / Mock")]),v._v(" "),t("li",[v._v("Live Reloading / HMR")]),v._v(" "),t("li",[v._v("Source Map")])]),v._v(" "),t("h3",{attrs:{id:"代码提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[v._v("#")]),v._v(" 代码提交")]),v._v(" "),t("p",[v._v("可以使用git Hooks自动化检查项目, 检查风格和质量, 确保提交的代码不会有问题, 甚至git log都可以做格式限制")]),v._v(" "),t("ul",[t("li",[v._v("git hooks")]),v._v(" "),t("li",[v._v("lint-staged")]),v._v(" "),t("li",[v._v("持续集成")])]),v._v(" "),t("h3",{attrs:{id:"部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[v._v("#")]),v._v(" 部署")]),v._v(" "),t("p",[v._v("可以用一行命令代替传统的ftp上传, 可以在代码提交过后通过自动化的通过持续集成或者持续部署的方式自动部署到服务器")]),v._v(" "),t("ul",[t("li",[v._v("CI/CD")]),v._v(" "),t("li",[v._v("自动发布")])])])}),[],!1,null,null,null);_.default=e.exports}}]);